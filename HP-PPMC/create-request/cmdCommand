ksc_set SCRIPT_NAME="[AS.PKG_TRANSFER_PATH]REQ_[REQ.REQUEST_ID]_[SYS.UNIQUE_IDENTIFIER].sql"
ksc_begin_script [SCRIPT_NAME]
whenever sqlerror exit failure
set serveroutput on size unlimited
variable retcode number
variable source_request_id number
variable description       varchar2(240)
variable current_user      varchar2(200)
declare
  v_Return            	number;
  P_PARENT_REQUEST_ID 	NUMBER;
  P_REQUEST_HANDLE	BETEO_KCRT_UTIL.T_REQUEST_HANDLE;
  P_CREATED_USERNAME 	VARCHAR2(200);
  P_LAST_UPDATED_USERNAME VARCHAR2(200);
  P_REQUEST_TYPE_NAME 	VARCHAR2(80);
  P_REQUEST_SUBTYPE_NAME VARCHAR2(80);
  P_DESCRIPTION 	VARCHAR2(400);
  P_STATUS_NAME 	VARCHAR2(80);
  P_WORKFLOW_NAME 	VARCHAR2(80);
  P_DEPARTMENT_NAME 	VARCHAR2(80);
  P_PRIORITY_NAME 	VARCHAR2(80);
  P_APPLICATION 	VARCHAR2(30);
  P_ASSIGNED_TO_USERNAME VARCHAR2(200);
  P_ASSIGNED_TO_GROUP_NAME VARCHAR2(30);
  P_PROJECT_CODE 	VARCHAR2(30);
  P_CONTACT_FIRST_NAME 	VARCHAR2(30);
  P_CONTACT_LAST_NAME 	VARCHAR2(30);
  P_COMPANY 		VARCHAR2(30);
  P_NOTES 		VARCHAR2(200);
  P_BATCH_NUMBER NUMBER;
  P_PARAMETER1 VARCHAR2(200);
  P_VISIBLE_PARAMETER1 VARCHAR2(200);
  P_PARAMETER2 VARCHAR2(200);
  P_VISIBLE_PARAMETER2 VARCHAR2(200);
  P_PARAMETER3 VARCHAR2(200);
  P_VISIBLE_PARAMETER3 VARCHAR2(200);
  P_PARAMETER4 VARCHAR2(200);
  P_VISIBLE_PARAMETER4 VARCHAR2(200);
  P_PARAMETER5 VARCHAR2(200);
  P_VISIBLE_PARAMETER5 VARCHAR2(200);
  P_PARAMETER6 VARCHAR2(200);
  P_VISIBLE_PARAMETER6 VARCHAR2(200);
  P_PARAMETER7 VARCHAR2(200);
  P_VISIBLE_PARAMETER7 VARCHAR2(200);
  P_PARAMETER8 VARCHAR2(200);
  P_VISIBLE_PARAMETER8 VARCHAR2(200);
  P_PARAMETER41 VARCHAR2(4000);
  P_VISIBLE_PARAMETER41 VARCHAR2(4000);
  P_PARAMETER42 VARCHAR2(4000);
  P_VISIBLE_PARAMETER42 VARCHAR2(4000);
  n_request_id	NUMBER;
  P_FROM_REQUEST_ID NUMBER;
  P_TO_REQUEST_ID NUMBER;
  P_REF_RELATIONSHIP_ID NUMBER;
  P_NOTE VARCHAR2(4000);

BEGIN
  :retcode := 0;
  --P_PARENT_REQUEST_ID := [REQ.REQUEST_ID];
  P_PARENT_REQUEST_ID := NULL;
  P_REQUEST_HANDLE := BETEO_KCRT_UTIL.CREATE_MT_REQUEST(P_PARENT_REQUEST_ID);
  
  IF (BETEO_KCRT_UTIL.IS_HANDLE_VALID(P_REQUEST_HANDLE)) THEN
	DBMS_OUTPUT.PUT_LINE('<!--HTML--><font color="green">Request Handler ' || P_REQUEST_HANDLE.request_id || ' angelegt</font>');
        :retcode:=0;
	-- assigns the new request_id to n_request_id
        n_request_id:=P_REQUEST_HANDLE.request_id;
	-- start creating header information
 	-- first define needed entries
	P_CREATED_USERNAME := 'admin';
  	P_LAST_UPDATED_USERNAME := 'admin';
  	P_REQUEST_TYPE_NAME := '[REQ_TYPE_NAME]';
  	P_REQUEST_SUBTYPE_NAME := NULL;
  	P_DESCRIPTION := '[DESCRIPTION]';
  	P_STATUS_NAME := 'in Prüfung';
  	P_WORKFLOW_NAME := '[WFL_TYPE_NAME]';
  	P_DEPARTMENT_NAME := NULL;
  	P_PRIORITY_NAME := NULL;
  	P_APPLICATION := NULL;
  	P_ASSIGNED_TO_USERNAME := '[REQ.ASSIGNED_TO_USERNAME]';
  	P_ASSIGNED_TO_GROUP_NAME := NULL;
  	P_PROJECT_CODE := NULL;
  	P_CONTACT_FIRST_NAME := NULL;
  	P_CONTACT_LAST_NAME := NULL;
  	P_COMPANY := NULL;
  	P_NOTES := NULL;

	-- Set Header Fields
  	v_Return := BETEO_KCRT_UTIL.SET_HEADER_FIELDS(
    		P_REQUEST_HANDLE => P_REQUEST_HANDLE,
    		P_CREATED_USERNAME => P_CREATED_USERNAME,
    		P_LAST_UPDATED_USERNAME => P_LAST_UPDATED_USERNAME,
    		P_REQUEST_TYPE_NAME => P_REQUEST_TYPE_NAME,
    		P_REQUEST_SUBTYPE_NAME => P_REQUEST_SUBTYPE_NAME,
    		P_DESCRIPTION => P_DESCRIPTION,
    		P_STATUS_NAME => P_STATUS_NAME,
    		P_WORKFLOW_NAME => P_WORKFLOW_NAME,
    		P_DEPARTMENT_NAME => P_DEPARTMENT_NAME,
    		P_PRIORITY_NAME => P_PRIORITY_NAME,
    		P_APPLICATION => P_APPLICATION,
    		P_ASSIGNED_TO_USERNAME => P_ASSIGNED_TO_USERNAME,
    		P_ASSIGNED_TO_GROUP_NAME => P_ASSIGNED_TO_GROUP_NAME,
    		P_PROJECT_CODE => P_PROJECT_CODE,
    		P_CONTACT_FIRST_NAME => P_CONTACT_FIRST_NAME,
    		P_CONTACT_LAST_NAME => P_CONTACT_LAST_NAME,
    		P_COMPANY => P_COMPANY,
    		P_NOTES => P_NOTES  );
	IF (v_Return=0) THEN
		:retcode:=0;
		DBMS_OUTPUT.PUT_LINE('<!--HTML--><font color="green">Request Header angelegt</font>');
		-- start creating detail information
	 	-- first define needed entries
  		P_BATCH_NUMBER := 1;
  		P_PARAMETER1 := '[PARA1]';
  		P_VISIBLE_PARAMETER1 := '[VPARA1]';
  		P_PARAMETER2 := '[PARA2]';
  		P_VISIBLE_PARAMETER2 := '[VPARA2]';
  		P_PARAMETER3 := '[PARA3]';
  		P_VISIBLE_PARAMETER3 := '[VPARA3]';
  		P_PARAMETER4 := [PARA4];
  		P_VISIBLE_PARAMETER4 := [VPARA4];
  		P_PARAMETER5 := '[PARA5]';
  		P_VISIBLE_PARAMETER5 := '[VPARA5]';
  		P_PARAMETER6 := '[PARA6]';
  		P_VISIBLE_PARAMETER6 := '[VPARA6]';
  		P_PARAMETER7 := '[PARA7]';
  		P_VISIBLE_PARAMETER7 := '[VPARA7]';
  		P_PARAMETER8 := '[PARA8]';
  		P_VISIBLE_PARAMETER8 := '[VPARA8]';
  		P_PARAMETER41 := '[PARA41]';
  		P_VISIBLE_PARAMETER41 := '[VPARA41]';
  		P_PARAMETER42 := '[PARA42]';
  		P_VISIBLE_PARAMETER42 := '[VPARA42]';
		v_Return := BETEO_KCRT_UTIL.SET_DETAIL_FIELDS(
    			P_REQUEST_HANDLE => P_REQUEST_HANDLE,
    			P_BATCH_NUMBER => P_BATCH_NUMBER,
    			P_PARAMETER1 => P_PARAMETER1,
    			P_VISIBLE_PARAMETER1 => P_VISIBLE_PARAMETER1,
    			P_PARAMETER2 => P_PARAMETER2,
    			P_VISIBLE_PARAMETER2 => P_VISIBLE_PARAMETER2,
    			P_PARAMETER3 => P_PARAMETER3,
    			P_VISIBLE_PARAMETER3 => P_VISIBLE_PARAMETER3,
    			P_PARAMETER4 => P_PARAMETER4,
    			P_VISIBLE_PARAMETER4 => P_VISIBLE_PARAMETER4,
    			P_PARAMETER5 => P_PARAMETER5,
    			P_VISIBLE_PARAMETER5 => P_VISIBLE_PARAMETER5,
    			P_PARAMETER6 => P_PARAMETER6,
    			P_VISIBLE_PARAMETER6 => P_VISIBLE_PARAMETER6,
    			P_PARAMETER7 => P_PARAMETER7,
    			P_VISIBLE_PARAMETER7 => P_VISIBLE_PARAMETER7,
    			P_PARAMETER8 => P_PARAMETER8,
    			P_VISIBLE_PARAMETER8 => P_VISIBLE_PARAMETER8,
    			P_PARAMETER41 => P_PARAMETER41,
    			P_VISIBLE_PARAMETER41 => P_VISIBLE_PARAMETER41,
    			P_PARAMETER42 => P_PARAMETER42,
    			P_VISIBLE_PARAMETER42 => P_VISIBLE_PARAMETER42);
		IF (v_Return=0) THEN
			:retcode:=0;
			DBMS_OUTPUT.PUT_LINE('<!--HTML--><font color="green">Request Detail angelegt</font>');
			-- submit the request			
			v_Return := BETEO_KCRT_UTIL.SUBMIT_REQUEST(
    				P_REQUEST_HANDLE => P_REQUEST_HANDLE
  				);
			IF (v_Return=0) THEN
				:retcode:=0;
				DBMS_OUTPUT.PUT_LINE('<!--HTML--><font color="green">Request submitted</font>');
				
				P_FROM_REQUEST_ID := [SOURCE_REQUEST_ID];
				P_TO_REQUEST_ID :=  n_request_id;
				P_REF_RELATIONSHIP_ID := [RELA];
				v_Return := BETEO_KCRT_UTIL.CREATE_REFERENCE_CUST(P_FROM_REQUEST_ID, P_TO_REQUEST_ID, P_REF_RELATIONSHIP_ID); 
				IF (v_Return=0) THEN
					:retcode:=0;
					DBMS_OUTPUT.PUT_LINE('<!--HTML--><font color="green">Reference created</font>');
					P_NOTE := 'Die Action '||n_request_id||' wurde von [SYS.USERNAME] angelegt';
					v_Return := BETEO_KCRT_UTIL.ADD_NOTE_TO_REQUEST([SOURCE_REQUEST_ID], '[SYS.USERNAME]', P_NOTE);
					IF (v_Return=0) THEN
						DBMS_OUTPUT.PUT_LINE('<!--HTML--><font color="green">Note created</font>');
						:retcode:=0;					
					ELSE
						:retcode:=1;
					END IF;
					
				ELSE
					:retcode:=1;
				END IF;			

			ELSE
				:retcode:=1;
			END IF;
		ELSE
			:retcode:=1;
		END IF;
	ELSE
		:retcode:=1;
	END IF;
END IF;
end;
/
show errors
exit :retcode
ksc_end_script
-- execute the script
ksc_local_exec sqlplus ppmc1/ppmc1@orcl @[SCRIPT_NAME]
ksc_local_exec rm [SCRIPT_NAME]